/**
 * ! Patr√≥n Facade
 * Este patr√≥n proporciona una interfaz unificada para un conjunto de interfaces
 * en un subsistema.
 *
 * Facade define una interfaz de nivel m√°s alto que hace que el subsistema
 * sea m√°s f√°cil de usar.
 *
 * * Es √∫til cuando un subsistema es complejo o dif√≠cil de entender para
 * * proporcionar una interfaz simplificada para el cliente.
 *
 * https://refactoring.guru/es/design-patterns/facade
 */

// Subsistema de pagos completo

// Simula una clase para validar tarjetas
class CardValidator {
  validate(cardNumber: string): boolean {
    console.log(`üîç Validando tarjeta ${cardNumber}`);
    return cardNumber.length === 16; // Ejemplo b√°sico de validaci√≥n
  }
}

// Simula un sistema de autorizaci√≥n de pagos
class PaymentProcessor {
  authorize(amount: number): boolean {
    console.log(`üí≥ Autorizando pago de $${amount}`);
    return amount > 0;
  }
}

// Simula un sistema de notificaciones
class NotificationService {
  sendNotification(message: string): void {
    console.log(`üì© Enviando notificaci√≥n: ${message}`);
  }
}

class PaymentFacade {
  private cardValidator: CardValidator;
  private paymentProcessor: PaymentProcessor;
  private notificationService: NotificationService;

  constructor() {
    this.cardValidator = new CardValidator();
    this.paymentProcessor = new PaymentProcessor();
    this.notificationService = new NotificationService();
  }

  // ‚úÖ M√©todo simple para procesar pagos
  processPayment(cardNumber: string, amount: number): void {
    if (!this.cardValidator.validate(cardNumber)) {
      console.log("‚ùå Tarjeta inv√°lida. Pago rechazado.");
      return;
    }

    if (!this.paymentProcessor.authorize(amount)) {
      console.log("‚ùå Error al autorizar el pago.");
      return;
    }

    console.log("‚úÖ Pago exitoso.");
    this.notificationService.sendNotification(`Pago de $${amount} realizado con √©xito.`);
  }
}

function facadeMain() {
  const paymentFacade = new PaymentFacade();

  // El cliente solo llama a un m√©todo en lugar de interactuar con m√∫ltiples clases
  paymentFacade.processPayment("1234567812345678", 100);
}

facadeMain();
